TODO:

- add un-do of spline
	- use controlpoints (tags) for undo/redo. when undo happend, just cut the spline at the calculated pointcount.
	- when undo happened, redo is possible until a new controlpoint was appended
	- use right click for undo, apply time penalty to input component
	- optional: copy removed triangles vertices and apply them to another texture of a construction site

- loading of levels from files
	- define level saving format

- add on-screen instructions (controls, goals, hints)
	- esc menu; left mouse - draw track; right mouse - undo track (penalty); current mission goals

- train vs train collision
- check all wagons of a train for collision

- add optional targets to score more points or have an objective at all (passengers)
	- taxi mission gta?

- level editor or procedural level creation?
	- level1: reach target zone
	- level2: reach target zone in time
	- level3: do 3 passengers (in time)
	- level4: collect 1000pts (passengers, collectables, close calls, combos) and reach target zone

QUESTIONABLE:
- make collisionmanager running in an own thread calling callbacks on overlap ?
- abstract gamestates into tgf
	- running: load, initloadedlevel, pause, win, loose, restart
	- pause: as is?
	- end: as is?
	- level_interface: load(), restart()

DONE:
- splineTexture: use catmullrom normals to generate a vertexbuffer with texture bending in railtrack
- added option to calculate normals in catmullrom spline
- processinputcomponent -> single segment input, polyline input, polyline mindist <> drawrect.size
	- rework catmull-rom spline to be more curvy: maybe restrict in input controlpoints or downsample the points, use chordal
	- use last controlpoint of a track for the display as well
- use component based system (unique_ptr)
	- gameobject : entity {components_; draw/update: for(components_) c->draw()/c->update(); }
	- component : entity {ownerobject_; draw/update: manipulate_or_extend_ownerobject(); } maybe friend class?
		- moveTo/moveBy (for hitzones)
- abstract collisionManager + collisionEntity into gameframework
	- traincollisionmanager, TObstacle derived from that
- add drawing states to init drawing outside of the rect (drawing begins inside the rect tho)
- added gamestates: mainmenu, pause, win/loose screen
- interate on the collision detection
	- actual shapes/rectangles testing
	- onEnter / onLeave system (not spamming the callbacks when hit in several updates)	
- create collisionmanager
	- collision channels (obstacle vs trains)
- add obstacles to loose the game
- add target zones to win the game
- place stuff on track < 0.0 results in pos = 0 or something off
- smooth camera movement
- camera focused on end of the track instead of the train (+rotation)
- implement circular catmul rom spline to prevent self intersections ect. (see http://www.cemyuksel.com/research/catmullroparam_/catmullrom.pdf, https://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/)
- add spline class for smooth railtracks
	c1 continuity, local control, interpolation: catmull rom, bezier, herminte
- new track segment is not streched to full length now because the min/max thingy doesnt work as intended
	- THIS MAY EVEN BE A FEATURE?! try when spline is done
- extend track by input